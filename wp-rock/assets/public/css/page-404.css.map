{"version":3,"file":"css/page-404.css","mappings":"AAKA,aACI,WAAY,CACZ,iBAJJ,CAMI,wBAII,qBAFA,gCAAa,CACb,+CAAsB,CAFtB,WAAY,CAGZ,sBAAuB,CACvB,eAJR,CCkDQ,yBDnDJ,wBAOQ,eAFV,CACF,CAKI,iBAEI,gCAAa,CADb,WAAY,CAIZ,QAAS,CAFT,iBAAkB,CAClB,OAAQ,CAER,qEAAgC,CAChC,UAHR,CAQQ,4CAGI,uBAA2B,CAF3B,2BAA4B,CAC5B,qBALZ,CASQ,sBACI,mDACA,SAPZ,CC2BQ,yBDtBA,sBAIQ,SALd,CACF,CAQQ,sBAEI,wBAAyB,CADzB,mDAEA,SANZ,CCiBQ,yBDdA,sBAKQ,SAJd,CACF,CAOQ,sBACI,wBEvCO,CFwCP,SALZ,CCQQ,yBDLA,sBAIQ,SAHd,CACF,CAMQ,sBACI,wBAAyB,CACzB,SAJZ,CAQI,mBAII,UEpEA,CFqEA,WAAY,CAJZ,iBAAkB,CAElB,iBAAkB,CADlB,SAHR,CASI,kBAKI,iBAAkB,CAFlB,4BE9ES,CC2HT,eH/C8B,CAC9B,gBAEA,iBAPR,CGsDQ,gDACI,kBACI,wCH5Cd,CACF,CGmDQ,0BACI,kBACI,eHjDd,CACF,CATQ,wBAQI,yHAA4D,CAD5D,aAYZ,CATQ,iDALI,QAAS,CACT,uBAAwB,CAHxB,MAAO,CAFP,iBAAkB,CAGlB,OAAQ,CAFR,KA2BZ,CAnBQ,yBAQI,4HADA,UAYZ,CAPI,mBAGI,mBE3GO,CC4HP,cHnB8B,CAC9B,eAAgB,CAGhB,aAAc,CADd,wBASR,CGUQ,gDACI,mBACI,sCHAd,CACF,CGOQ,0BACI,mBACI,cHLd,CACF","sources":["webpack://wp-webpack-workflow/./src/scss/parts/404.scss","webpack://wp-webpack-workflow/./src/scss/bootstrap/mixins/_breakpoints.scss","webpack://wp-webpack-workflow/./src/scss/parts/_variables.scss","webpack://wp-webpack-workflow/./src/scss/parts/_mixin.scss"],"sourcesContent":["@import \"../bootstrap/variables\";\r\n@import \"../bootstrap/mixins\";\r\n@import \"../parts/variables\";\r\n@import \"../parts/mixin\";\r\n\r\n.section-404 {\r\n    height: 100%;\r\n    position: relative;\r\n\r\n    &__container {\r\n        height: 100%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        padding: 154px 0;\r\n        @include media-breakpoint-up(md){\r\n            padding: 162px 0;\r\n        }\r\n    }\r\n\r\n    &__bg {\r\n        height: 100%;\r\n        display: flex;\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        width: 100%;\r\n    }\r\n\r\n    &__layer {\r\n\r\n        &-4, &-3 {\r\n            background-repeat: no-repeat;\r\n            background-size: cover;\r\n            background-position: center;\r\n        }\r\n\r\n        &-4 {\r\n            background-image: url(\"../../images/404_bg_layer-1.jpg\");\r\n            width: 50%;\r\n            @include media-breakpoint-up(md) {\r\n                width: 25%;\r\n            }\r\n        }\r\n\r\n        &-3 {\r\n            background-image: url(\"../../images/404_bg_layer-2.svg\");\r\n            background-color: #FF009C;\r\n            width: 15%;\r\n            @include media-breakpoint-up(md) {\r\n                width: 25%;\r\n            }\r\n        }\r\n\r\n        &-2 {\r\n            background-color: $color-brand-dark;\r\n            width: 35%;\r\n            @include media-breakpoint-up(md) {\r\n                width: 25%;\r\n            }\r\n        }\r\n\r\n        &-1 {\r\n            background-color: #FFB5B9;\r\n            width: 25%;\r\n        }\r\n    }\r\n\r\n    &__body {\r\n        position: relative;\r\n        z-index: 1;\r\n        text-align: center;\r\n        color: $white;\r\n        height: 100%;\r\n    }\r\n\r\n    &__404 {\r\n        @include responsive-font-size(208px, 512px);\r\n        line-height: .75;\r\n        font-family: $font-secondary;\r\n        position: relative;\r\n        color: transparent;\r\n        &:after {\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            content: attr(data-text);\r\n            color: $color-brand;\r\n            clip-path: polygon(50% -50%, 100% -50%, 100% 100%, 50% 100%);\r\n        }\r\n        &::before {\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            content: attr(data-text);\r\n            color: $white;\r\n            clip-path: polygon(-100% 50%,100% -50%,50% -100%,50% 100%);\r\n        }\r\n    }\r\n\r\n    &__text {\r\n        @include responsive-font-size(32px, 50px);\r\n        font-weight: 600;\r\n        font-family: $font-primary;\r\n        text-transform: uppercase;\r\n        line-height: 1;\r\n    }\r\n}\r\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n    $n: index($breakpoint-names, $name);\n    @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n    $min: map-get($breakpoints, $name);\n    @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n    $next: breakpoint-next($name, $breakpoints);\n    @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n    @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n    $min: breakpoint-min($name, $breakpoints);\n    @if $min {\n        @media (min-width: $min) {\n            @content;\n        }\n    } @else {\n        @content;\n    }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n    $max: breakpoint-max($name, $breakpoints);\n    @if $max {\n        @media (max-width: $max) {\n            @content;\n        }\n    } @else {\n        @content;\n    }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n    $min: breakpoint-min($lower, $breakpoints);\n    $max: breakpoint-max($upper, $breakpoints);\n\n    @if $min != null and $max != null {\n        @media (min-width: $min) and (max-width: $max) {\n            @content;\n        }\n    } @else if $max == null {\n        @include media-breakpoint-up($lower, $breakpoints) {\n            @content;\n        }\n    } @else if $min == null {\n        @include media-breakpoint-down($upper, $breakpoints) {\n            @content;\n        }\n    }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n    $min: breakpoint-min($name, $breakpoints);\n    $max: breakpoint-max($name, $breakpoints);\n\n    @if $min != null and $max != null {\n        @media (min-width: $min) and (max-width: $max) {\n            @content;\n        }\n    } @else if $max == null {\n        @include media-breakpoint-up($name, $breakpoints) {\n            @content;\n        }\n    } @else if $min == null {\n        @include media-breakpoint-down($name, $breakpoints) {\n            @content;\n        }\n    }\n}\n","// Font-family\r\n$font-primary: RagSans;\r\n$font-secondary: RAG-Marom-Poster;\r\n\r\n// Colors\r\n$white: #FFFFFF;\r\n$black: #000000;\r\n$color-main: $black;\r\n$color-lighter: #6F6F6F;\r\n$color-gray: #D3D3D3;\r\n$color-light-pink: #FFDEDE;\r\n$color-dark-gray: #888888;\r\n$color-brightest: #B8B8B8;\r\n$color-red: #FF0E0E;\r\n$color-brand: #FF1521;\r\n$color-brand-lighter: #FFE6E6;\r\n$color-light-red-2: #FFB5B9;\r\n$color-brand-dark: #6D052A;\r\n$color-burgundy: #800029;\r\n$color-dark: #3F0417;\r\n\r\n// h1 styles\r\n$h1-font-size: 160px;\r\n$h1-line-height: 160px;\r\n\r\n// h2 styles\r\n$h2-font-size: 100px;\r\n$h2-line-height: 100px;\r\n\r\n// h3 styles\r\n$h3-font-size: 50px;\r\n$h3-line-height: 50px;\r\n\r\n// h4 styles\r\n$h4-font-size: 40px;\r\n$h4-line-height: 40px;\r\n\r\n// h5 styles\r\n$h5-font-size: 36px;\r\n$h5-line-height: 36px;\r\n\r\n// h6 styles\r\n$h6-font-size: 32px;\r\n$h6-line-height: 32px;\r\n\r\n$fluid_max_width: 1440px;\r\n","@use \"sass:map\";\r\n@use \"sass:math\";\r\n\r\n@mixin custom-scrollbar {\r\n    //overflow-y: auto;\r\n\t\r\n    &::-webkit-scrollbar {\r\n        width: 10px;\r\n        height: 10px;\r\n    }\r\n\t\r\n    &::-webkit-scrollbar-track {\r\n        border-radius: 5px;\r\n        background: $white;\r\n    }\r\n\t\r\n    &::-webkit-scrollbar-thumb {\r\n        transition: background-color .15s;\r\n        border-radius: 5px;\r\n        background: #B4B4B4;\r\n    }\r\n\t\r\n    &::-webkit-scrollbar-thumb:hover {\r\n        background: rgba(#B4B4B4, .8);\r\n    }\r\n\t\r\n    &::-webkit-scrollbar-thumb:active {\r\n        background: rgba(#B4B4B4, .9);\r\n    }\r\n}\r\n\r\n@mixin h1 {\r\n    font-size: $h1-font-size;\r\n    line-height: $h1-line-height;\r\n}\r\n\r\n@mixin h2 {\r\n    font-size: $h2-font-size;\r\n    line-height: $h2-line-height;\r\n}\r\n\r\n@mixin h3 {\r\n    font-size: $h3-font-size;\r\n    line-height: $h3-line-height;\r\n}\r\n\r\n@mixin h4 {\r\n    font-size: $h4-font-size;\r\n    line-height: $h4-line-height;\r\n}\r\n\r\n@mixin h5 {\r\n    font-size: $h5-font-size;\r\n    line-height: $h5-line-height;\r\n}\r\n\r\n@mixin h6 {\r\n    font-size: $h6-font-size;\r\n    line-height: $h6-line-height;\r\n}\r\n\r\n@mixin make-responsive-headers() {\r\n    h1 {\r\n        @include h1;\r\n    }\r\n    h2 {\r\n        @include h2;\r\n    }\r\n    h3 {\r\n        @include h3;\r\n    }\r\n    h4 {\r\n        @include h4;\r\n    }\r\n    h5 {\r\n        @include h5;\r\n    }\r\n    h6 {\r\n        @include h6;\r\n    }\r\n    @each $breakpoint in map-keys($grid-breakpoints) {\r\n        @include media-breakpoint-up($breakpoint) {\r\n            $infix: breakpoint-infix($breakpoint, $grid-breakpoints);\r\n\t\t\t\r\n            .h1#{$infix} {\r\n                @include h1;\r\n            }\r\n            .h2#{$infix} {\r\n                @include h2;\r\n            }\r\n            .h3#{$infix} {\r\n                @include h3;\r\n            }\r\n            .h4#{$infix} {\r\n                @include h4;\r\n            }\r\n            .h5#{$infix} {\r\n                @include h5;\r\n            }\r\n            .h6#{$infix} {\r\n                @include h6;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n// ==============================\r\n// Responsive font size mixin\r\n// ==============================\r\n\r\n//  default font scale bounding\r\n$font-lock-min: \"sm\" !default;\r\n$font-lock-max: \"xl\" !default;\r\n\r\n\r\n//  responsive font-size\r\n@mixin responsive-font-size(\r\n    $min,\r\n    $max: null,\r\n    $lock-min: $font-lock-min,\r\n    $lock-max: $font-lock-max\r\n) {\r\n    & {\r\n        font-size: $min;\r\n    }\r\n    @if $max {\r\n        @media (min-width: map.get($grid-breakpoints, $font-lock-min)) and (max-width: map.get($grid-breakpoints, $font-lock-max)) {\r\n            & {\r\n                font-size: calc(\r\n                    #{$min} +\r\n                    #{strip-unit($max) - strip-unit($min)} *\r\n                    (100vw - #{map.get($grid-breakpoints, $font-lock-min)}) /\r\n                    #{strip-unit(map.get($grid-breakpoints, $font-lock-max)) - strip-unit(map.get($grid-breakpoints, $font-lock-min))}\r\n                );\r\n            }\r\n        }\r\n        @media (min-width: map.get($grid-breakpoints, $font-lock-max)) {\r\n            & {\r\n                font-size: $max;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//  strip units helper function\r\n@function strip-unit($number) {\r\n    @if type-of($number) == 'number' and not unitless($number) {\r\n        @return math.div($number, $number * 0 + 1);\r\n    }\r\n\t\r\n    @return $number;\r\n}\r\n\r\n//  responsive width\r\n@mixin responsive-width(\r\n    $min,\r\n    $max: null,\r\n    $lock-min: $font-lock-min,\r\n    $lock-max: $font-lock-max\r\n) {\r\n    & {\r\n        width: $min;\r\n    }\r\n    @if $max {\r\n        @media (min-width: map.get($grid-breakpoints, $font-lock-min)) and (max-width: map.get($grid-breakpoints, $font-lock-max)) {\r\n            & {\r\n                width: calc(\r\n                    #{$min} +\r\n                    #{strip-unit($max) - strip-unit($min)} *\r\n                    (100vw - #{map.get($grid-breakpoints, $font-lock-min)}) /\r\n                    #{strip-unit(map.get($grid-breakpoints, $font-lock-max)) - strip-unit(map.get($grid-breakpoints, $font-lock-min))}\r\n                );\r\n            }\r\n        }\r\n        @media (min-width: map.get($grid-breakpoints, $font-lock-max)) {\r\n            & {\r\n                width: $max;\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"names":[],"sourceRoot":""}